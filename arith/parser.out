Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> arith_expression
Rule 2     expression -> bool_expression
Rule 3     arith_expression -> arith_expression PLUS arith_expression
Rule 4     arith_expression -> arith_expression MINUS arith_expression
Rule 5     arith_expression -> arith_expression TIMES arith_expression
Rule 6     arith_expression -> arith_expression DIVIDE arith_expression
Rule 7     bool_expression -> arith_expression LT arith_expression
Rule 8     bool_expression -> arith_expression GT arith_expression
Rule 9     bool_expression -> arith_expression LE arith_expression
Rule 10    bool_expression -> arith_expression GE arith_expression
Rule 11    bool_expression -> arith_expression EQ arith_expression
Rule 12    bool_expression -> arith_expression NEQ arith_expression
Rule 13    bool_expression -> bool_expression BEQ bool_expression
Rule 14    bool_expression -> bool_expression BNEQ bool_expression
Rule 15    bool_expression -> bool_expression AND bool_expression
Rule 16    bool_expression -> bool_expression OR bool_expression
Rule 17    bool_expression -> bool_expression NAND bool_expression
Rule 18    bool_expression -> bool_expression NOR bool_expression
Rule 19    bool_expression -> bool_expression IMP bool_expression
Rule 20    bool_expression -> NOT bool_expression
Rule 21    arith_expression -> NUMBER
Rule 22    bool_expression -> BOOL_LIT
Rule 23    arith_expression -> LPAREN arith_expression RPAREN
Rule 24    bool_expression -> LPAREN bool_expression RPAREN

Terminals, with rules where they appear

AND                  : 15
BEQ                  : 13
BNEQ                 : 14
BOOL_LIT             : 22
DIVIDE               : 6
EQ                   : 11
GE                   : 10
GT                   : 8
IMP                  : 19
LE                   : 9
LPAREN               : 23 24
LT                   : 7
MINUS                : 4
NAND                 : 17
NEQ                  : 12
NOR                  : 18
NOT                  : 20
NUMBER               : 21
OR                   : 16
PLUS                 : 3
RPAREN               : 23 24
TIMES                : 5
error                : 

Nonterminals, with rules where they appear

arith_expression     : 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 23
bool_expression      : 2 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 24
expression           : 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . arith_expression
    (2) expression -> . bool_expression
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN
    (7) bool_expression -> . arith_expression LT arith_expression
    (8) bool_expression -> . arith_expression GT arith_expression
    (9) bool_expression -> . arith_expression LE arith_expression
    (10) bool_expression -> . arith_expression GE arith_expression
    (11) bool_expression -> . arith_expression EQ arith_expression
    (12) bool_expression -> . arith_expression NEQ arith_expression
    (13) bool_expression -> . bool_expression BEQ bool_expression
    (14) bool_expression -> . bool_expression BNEQ bool_expression
    (15) bool_expression -> . bool_expression AND bool_expression
    (16) bool_expression -> . bool_expression OR bool_expression
    (17) bool_expression -> . bool_expression NAND bool_expression
    (18) bool_expression -> . bool_expression NOR bool_expression
    (19) bool_expression -> . bool_expression IMP bool_expression
    (20) bool_expression -> . NOT bool_expression
    (22) bool_expression -> . BOOL_LIT
    (24) bool_expression -> . LPAREN bool_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    BOOL_LIT        shift and go to state 7

    expression                     shift and go to state 1
    arith_expression               shift and go to state 2
    bool_expression                shift and go to state 3

state 1

    (0) S' -> expression .



state 2

    (1) expression -> arith_expression .
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression
    (7) bool_expression -> arith_expression . LT arith_expression
    (8) bool_expression -> arith_expression . GT arith_expression
    (9) bool_expression -> arith_expression . LE arith_expression
    (10) bool_expression -> arith_expression . GE arith_expression
    (11) bool_expression -> arith_expression . EQ arith_expression
    (12) bool_expression -> arith_expression . NEQ arith_expression

    $end            reduce using rule 1 (expression -> arith_expression .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11
    LT              shift and go to state 12
    GT              shift and go to state 13
    LE              shift and go to state 14
    GE              shift and go to state 15
    EQ              shift and go to state 16
    NEQ             shift and go to state 17


state 3

    (2) expression -> bool_expression .
    (13) bool_expression -> bool_expression . BEQ bool_expression
    (14) bool_expression -> bool_expression . BNEQ bool_expression
    (15) bool_expression -> bool_expression . AND bool_expression
    (16) bool_expression -> bool_expression . OR bool_expression
    (17) bool_expression -> bool_expression . NAND bool_expression
    (18) bool_expression -> bool_expression . NOR bool_expression
    (19) bool_expression -> bool_expression . IMP bool_expression

    $end            reduce using rule 2 (expression -> bool_expression .)
    BEQ             shift and go to state 18
    BNEQ            shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21
    NAND            shift and go to state 22
    NOR             shift and go to state 23
    IMP             shift and go to state 24


state 4

    (21) arith_expression -> NUMBER .

    PLUS            reduce using rule 21 (arith_expression -> NUMBER .)
    MINUS           reduce using rule 21 (arith_expression -> NUMBER .)
    TIMES           reduce using rule 21 (arith_expression -> NUMBER .)
    DIVIDE          reduce using rule 21 (arith_expression -> NUMBER .)
    LT              reduce using rule 21 (arith_expression -> NUMBER .)
    GT              reduce using rule 21 (arith_expression -> NUMBER .)
    LE              reduce using rule 21 (arith_expression -> NUMBER .)
    GE              reduce using rule 21 (arith_expression -> NUMBER .)
    EQ              reduce using rule 21 (arith_expression -> NUMBER .)
    NEQ             reduce using rule 21 (arith_expression -> NUMBER .)
    $end            reduce using rule 21 (arith_expression -> NUMBER .)
    RPAREN          reduce using rule 21 (arith_expression -> NUMBER .)
    BEQ             reduce using rule 21 (arith_expression -> NUMBER .)
    BNEQ            reduce using rule 21 (arith_expression -> NUMBER .)
    AND             reduce using rule 21 (arith_expression -> NUMBER .)
    OR              reduce using rule 21 (arith_expression -> NUMBER .)
    NAND            reduce using rule 21 (arith_expression -> NUMBER .)
    NOR             reduce using rule 21 (arith_expression -> NUMBER .)
    IMP             reduce using rule 21 (arith_expression -> NUMBER .)


state 5

    (23) arith_expression -> LPAREN . arith_expression RPAREN
    (24) bool_expression -> LPAREN . bool_expression RPAREN
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN
    (7) bool_expression -> . arith_expression LT arith_expression
    (8) bool_expression -> . arith_expression GT arith_expression
    (9) bool_expression -> . arith_expression LE arith_expression
    (10) bool_expression -> . arith_expression GE arith_expression
    (11) bool_expression -> . arith_expression EQ arith_expression
    (12) bool_expression -> . arith_expression NEQ arith_expression
    (13) bool_expression -> . bool_expression BEQ bool_expression
    (14) bool_expression -> . bool_expression BNEQ bool_expression
    (15) bool_expression -> . bool_expression AND bool_expression
    (16) bool_expression -> . bool_expression OR bool_expression
    (17) bool_expression -> . bool_expression NAND bool_expression
    (18) bool_expression -> . bool_expression NOR bool_expression
    (19) bool_expression -> . bool_expression IMP bool_expression
    (20) bool_expression -> . NOT bool_expression
    (22) bool_expression -> . BOOL_LIT
    (24) bool_expression -> . LPAREN bool_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    BOOL_LIT        shift and go to state 7

    arith_expression               shift and go to state 25
    bool_expression                shift and go to state 26

state 6

    (20) bool_expression -> NOT . bool_expression
    (7) bool_expression -> . arith_expression LT arith_expression
    (8) bool_expression -> . arith_expression GT arith_expression
    (9) bool_expression -> . arith_expression LE arith_expression
    (10) bool_expression -> . arith_expression GE arith_expression
    (11) bool_expression -> . arith_expression EQ arith_expression
    (12) bool_expression -> . arith_expression NEQ arith_expression
    (13) bool_expression -> . bool_expression BEQ bool_expression
    (14) bool_expression -> . bool_expression BNEQ bool_expression
    (15) bool_expression -> . bool_expression AND bool_expression
    (16) bool_expression -> . bool_expression OR bool_expression
    (17) bool_expression -> . bool_expression NAND bool_expression
    (18) bool_expression -> . bool_expression NOR bool_expression
    (19) bool_expression -> . bool_expression IMP bool_expression
    (20) bool_expression -> . NOT bool_expression
    (22) bool_expression -> . BOOL_LIT
    (24) bool_expression -> . LPAREN bool_expression RPAREN
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NOT             shift and go to state 6
    BOOL_LIT        shift and go to state 7
    LPAREN          shift and go to state 29
    NUMBER          shift and go to state 4

    bool_expression                shift and go to state 27
    arith_expression               shift and go to state 28

state 7

    (22) bool_expression -> BOOL_LIT .

    BEQ             reduce using rule 22 (bool_expression -> BOOL_LIT .)
    BNEQ            reduce using rule 22 (bool_expression -> BOOL_LIT .)
    AND             reduce using rule 22 (bool_expression -> BOOL_LIT .)
    OR              reduce using rule 22 (bool_expression -> BOOL_LIT .)
    NAND            reduce using rule 22 (bool_expression -> BOOL_LIT .)
    NOR             reduce using rule 22 (bool_expression -> BOOL_LIT .)
    IMP             reduce using rule 22 (bool_expression -> BOOL_LIT .)
    $end            reduce using rule 22 (bool_expression -> BOOL_LIT .)
    RPAREN          reduce using rule 22 (bool_expression -> BOOL_LIT .)


state 8

    (3) arith_expression -> arith_expression PLUS . arith_expression
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 31

    arith_expression               shift and go to state 30

state 9

    (4) arith_expression -> arith_expression MINUS . arith_expression
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 31

    arith_expression               shift and go to state 32

state 10

    (5) arith_expression -> arith_expression TIMES . arith_expression
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 31

    arith_expression               shift and go to state 33

state 11

    (6) arith_expression -> arith_expression DIVIDE . arith_expression
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 31

    arith_expression               shift and go to state 34

state 12

    (7) bool_expression -> arith_expression LT . arith_expression
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 31

    arith_expression               shift and go to state 35

state 13

    (8) bool_expression -> arith_expression GT . arith_expression
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 31

    arith_expression               shift and go to state 36

state 14

    (9) bool_expression -> arith_expression LE . arith_expression
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 31

    arith_expression               shift and go to state 37

state 15

    (10) bool_expression -> arith_expression GE . arith_expression
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 31

    arith_expression               shift and go to state 38

state 16

    (11) bool_expression -> arith_expression EQ . arith_expression
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 31

    arith_expression               shift and go to state 39

state 17

    (12) bool_expression -> arith_expression NEQ . arith_expression
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 31

    arith_expression               shift and go to state 40

state 18

    (13) bool_expression -> bool_expression BEQ . bool_expression
    (7) bool_expression -> . arith_expression LT arith_expression
    (8) bool_expression -> . arith_expression GT arith_expression
    (9) bool_expression -> . arith_expression LE arith_expression
    (10) bool_expression -> . arith_expression GE arith_expression
    (11) bool_expression -> . arith_expression EQ arith_expression
    (12) bool_expression -> . arith_expression NEQ arith_expression
    (13) bool_expression -> . bool_expression BEQ bool_expression
    (14) bool_expression -> . bool_expression BNEQ bool_expression
    (15) bool_expression -> . bool_expression AND bool_expression
    (16) bool_expression -> . bool_expression OR bool_expression
    (17) bool_expression -> . bool_expression NAND bool_expression
    (18) bool_expression -> . bool_expression NOR bool_expression
    (19) bool_expression -> . bool_expression IMP bool_expression
    (20) bool_expression -> . NOT bool_expression
    (22) bool_expression -> . BOOL_LIT
    (24) bool_expression -> . LPAREN bool_expression RPAREN
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NOT             shift and go to state 6
    BOOL_LIT        shift and go to state 7
    LPAREN          shift and go to state 29
    NUMBER          shift and go to state 4

    bool_expression                shift and go to state 41
    arith_expression               shift and go to state 28

state 19

    (14) bool_expression -> bool_expression BNEQ . bool_expression
    (7) bool_expression -> . arith_expression LT arith_expression
    (8) bool_expression -> . arith_expression GT arith_expression
    (9) bool_expression -> . arith_expression LE arith_expression
    (10) bool_expression -> . arith_expression GE arith_expression
    (11) bool_expression -> . arith_expression EQ arith_expression
    (12) bool_expression -> . arith_expression NEQ arith_expression
    (13) bool_expression -> . bool_expression BEQ bool_expression
    (14) bool_expression -> . bool_expression BNEQ bool_expression
    (15) bool_expression -> . bool_expression AND bool_expression
    (16) bool_expression -> . bool_expression OR bool_expression
    (17) bool_expression -> . bool_expression NAND bool_expression
    (18) bool_expression -> . bool_expression NOR bool_expression
    (19) bool_expression -> . bool_expression IMP bool_expression
    (20) bool_expression -> . NOT bool_expression
    (22) bool_expression -> . BOOL_LIT
    (24) bool_expression -> . LPAREN bool_expression RPAREN
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NOT             shift and go to state 6
    BOOL_LIT        shift and go to state 7
    LPAREN          shift and go to state 29
    NUMBER          shift and go to state 4

    bool_expression                shift and go to state 42
    arith_expression               shift and go to state 28

state 20

    (15) bool_expression -> bool_expression AND . bool_expression
    (7) bool_expression -> . arith_expression LT arith_expression
    (8) bool_expression -> . arith_expression GT arith_expression
    (9) bool_expression -> . arith_expression LE arith_expression
    (10) bool_expression -> . arith_expression GE arith_expression
    (11) bool_expression -> . arith_expression EQ arith_expression
    (12) bool_expression -> . arith_expression NEQ arith_expression
    (13) bool_expression -> . bool_expression BEQ bool_expression
    (14) bool_expression -> . bool_expression BNEQ bool_expression
    (15) bool_expression -> . bool_expression AND bool_expression
    (16) bool_expression -> . bool_expression OR bool_expression
    (17) bool_expression -> . bool_expression NAND bool_expression
    (18) bool_expression -> . bool_expression NOR bool_expression
    (19) bool_expression -> . bool_expression IMP bool_expression
    (20) bool_expression -> . NOT bool_expression
    (22) bool_expression -> . BOOL_LIT
    (24) bool_expression -> . LPAREN bool_expression RPAREN
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NOT             shift and go to state 6
    BOOL_LIT        shift and go to state 7
    LPAREN          shift and go to state 29
    NUMBER          shift and go to state 4

    bool_expression                shift and go to state 43
    arith_expression               shift and go to state 28

state 21

    (16) bool_expression -> bool_expression OR . bool_expression
    (7) bool_expression -> . arith_expression LT arith_expression
    (8) bool_expression -> . arith_expression GT arith_expression
    (9) bool_expression -> . arith_expression LE arith_expression
    (10) bool_expression -> . arith_expression GE arith_expression
    (11) bool_expression -> . arith_expression EQ arith_expression
    (12) bool_expression -> . arith_expression NEQ arith_expression
    (13) bool_expression -> . bool_expression BEQ bool_expression
    (14) bool_expression -> . bool_expression BNEQ bool_expression
    (15) bool_expression -> . bool_expression AND bool_expression
    (16) bool_expression -> . bool_expression OR bool_expression
    (17) bool_expression -> . bool_expression NAND bool_expression
    (18) bool_expression -> . bool_expression NOR bool_expression
    (19) bool_expression -> . bool_expression IMP bool_expression
    (20) bool_expression -> . NOT bool_expression
    (22) bool_expression -> . BOOL_LIT
    (24) bool_expression -> . LPAREN bool_expression RPAREN
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NOT             shift and go to state 6
    BOOL_LIT        shift and go to state 7
    LPAREN          shift and go to state 29
    NUMBER          shift and go to state 4

    bool_expression                shift and go to state 44
    arith_expression               shift and go to state 28

state 22

    (17) bool_expression -> bool_expression NAND . bool_expression
    (7) bool_expression -> . arith_expression LT arith_expression
    (8) bool_expression -> . arith_expression GT arith_expression
    (9) bool_expression -> . arith_expression LE arith_expression
    (10) bool_expression -> . arith_expression GE arith_expression
    (11) bool_expression -> . arith_expression EQ arith_expression
    (12) bool_expression -> . arith_expression NEQ arith_expression
    (13) bool_expression -> . bool_expression BEQ bool_expression
    (14) bool_expression -> . bool_expression BNEQ bool_expression
    (15) bool_expression -> . bool_expression AND bool_expression
    (16) bool_expression -> . bool_expression OR bool_expression
    (17) bool_expression -> . bool_expression NAND bool_expression
    (18) bool_expression -> . bool_expression NOR bool_expression
    (19) bool_expression -> . bool_expression IMP bool_expression
    (20) bool_expression -> . NOT bool_expression
    (22) bool_expression -> . BOOL_LIT
    (24) bool_expression -> . LPAREN bool_expression RPAREN
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NOT             shift and go to state 6
    BOOL_LIT        shift and go to state 7
    LPAREN          shift and go to state 29
    NUMBER          shift and go to state 4

    bool_expression                shift and go to state 45
    arith_expression               shift and go to state 28

state 23

    (18) bool_expression -> bool_expression NOR . bool_expression
    (7) bool_expression -> . arith_expression LT arith_expression
    (8) bool_expression -> . arith_expression GT arith_expression
    (9) bool_expression -> . arith_expression LE arith_expression
    (10) bool_expression -> . arith_expression GE arith_expression
    (11) bool_expression -> . arith_expression EQ arith_expression
    (12) bool_expression -> . arith_expression NEQ arith_expression
    (13) bool_expression -> . bool_expression BEQ bool_expression
    (14) bool_expression -> . bool_expression BNEQ bool_expression
    (15) bool_expression -> . bool_expression AND bool_expression
    (16) bool_expression -> . bool_expression OR bool_expression
    (17) bool_expression -> . bool_expression NAND bool_expression
    (18) bool_expression -> . bool_expression NOR bool_expression
    (19) bool_expression -> . bool_expression IMP bool_expression
    (20) bool_expression -> . NOT bool_expression
    (22) bool_expression -> . BOOL_LIT
    (24) bool_expression -> . LPAREN bool_expression RPAREN
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NOT             shift and go to state 6
    BOOL_LIT        shift and go to state 7
    LPAREN          shift and go to state 29
    NUMBER          shift and go to state 4

    bool_expression                shift and go to state 46
    arith_expression               shift and go to state 28

state 24

    (19) bool_expression -> bool_expression IMP . bool_expression
    (7) bool_expression -> . arith_expression LT arith_expression
    (8) bool_expression -> . arith_expression GT arith_expression
    (9) bool_expression -> . arith_expression LE arith_expression
    (10) bool_expression -> . arith_expression GE arith_expression
    (11) bool_expression -> . arith_expression EQ arith_expression
    (12) bool_expression -> . arith_expression NEQ arith_expression
    (13) bool_expression -> . bool_expression BEQ bool_expression
    (14) bool_expression -> . bool_expression BNEQ bool_expression
    (15) bool_expression -> . bool_expression AND bool_expression
    (16) bool_expression -> . bool_expression OR bool_expression
    (17) bool_expression -> . bool_expression NAND bool_expression
    (18) bool_expression -> . bool_expression NOR bool_expression
    (19) bool_expression -> . bool_expression IMP bool_expression
    (20) bool_expression -> . NOT bool_expression
    (22) bool_expression -> . BOOL_LIT
    (24) bool_expression -> . LPAREN bool_expression RPAREN
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NOT             shift and go to state 6
    BOOL_LIT        shift and go to state 7
    LPAREN          shift and go to state 29
    NUMBER          shift and go to state 4

    bool_expression                shift and go to state 47
    arith_expression               shift and go to state 28

state 25

    (23) arith_expression -> LPAREN arith_expression . RPAREN
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression
    (7) bool_expression -> arith_expression . LT arith_expression
    (8) bool_expression -> arith_expression . GT arith_expression
    (9) bool_expression -> arith_expression . LE arith_expression
    (10) bool_expression -> arith_expression . GE arith_expression
    (11) bool_expression -> arith_expression . EQ arith_expression
    (12) bool_expression -> arith_expression . NEQ arith_expression

    RPAREN          shift and go to state 48
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11
    LT              shift and go to state 12
    GT              shift and go to state 13
    LE              shift and go to state 14
    GE              shift and go to state 15
    EQ              shift and go to state 16
    NEQ             shift and go to state 17


state 26

    (24) bool_expression -> LPAREN bool_expression . RPAREN
    (13) bool_expression -> bool_expression . BEQ bool_expression
    (14) bool_expression -> bool_expression . BNEQ bool_expression
    (15) bool_expression -> bool_expression . AND bool_expression
    (16) bool_expression -> bool_expression . OR bool_expression
    (17) bool_expression -> bool_expression . NAND bool_expression
    (18) bool_expression -> bool_expression . NOR bool_expression
    (19) bool_expression -> bool_expression . IMP bool_expression

    RPAREN          shift and go to state 49
    BEQ             shift and go to state 18
    BNEQ            shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21
    NAND            shift and go to state 22
    NOR             shift and go to state 23
    IMP             shift and go to state 24


state 27

    (20) bool_expression -> NOT bool_expression .
    (13) bool_expression -> bool_expression . BEQ bool_expression
    (14) bool_expression -> bool_expression . BNEQ bool_expression
    (15) bool_expression -> bool_expression . AND bool_expression
    (16) bool_expression -> bool_expression . OR bool_expression
    (17) bool_expression -> bool_expression . NAND bool_expression
    (18) bool_expression -> bool_expression . NOR bool_expression
    (19) bool_expression -> bool_expression . IMP bool_expression

  ! shift/reduce conflict for BEQ resolved as shift
  ! shift/reduce conflict for BNEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for IMP resolved as shift
    $end            reduce using rule 20 (bool_expression -> NOT bool_expression .)
    RPAREN          reduce using rule 20 (bool_expression -> NOT bool_expression .)
    BEQ             shift and go to state 18
    BNEQ            shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21
    NAND            shift and go to state 22
    NOR             shift and go to state 23
    IMP             shift and go to state 24

  ! BEQ             [ reduce using rule 20 (bool_expression -> NOT bool_expression .) ]
  ! BNEQ            [ reduce using rule 20 (bool_expression -> NOT bool_expression .) ]
  ! AND             [ reduce using rule 20 (bool_expression -> NOT bool_expression .) ]
  ! OR              [ reduce using rule 20 (bool_expression -> NOT bool_expression .) ]
  ! NAND            [ reduce using rule 20 (bool_expression -> NOT bool_expression .) ]
  ! NOR             [ reduce using rule 20 (bool_expression -> NOT bool_expression .) ]
  ! IMP             [ reduce using rule 20 (bool_expression -> NOT bool_expression .) ]


state 28

    (7) bool_expression -> arith_expression . LT arith_expression
    (8) bool_expression -> arith_expression . GT arith_expression
    (9) bool_expression -> arith_expression . LE arith_expression
    (10) bool_expression -> arith_expression . GE arith_expression
    (11) bool_expression -> arith_expression . EQ arith_expression
    (12) bool_expression -> arith_expression . NEQ arith_expression
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    LT              shift and go to state 12
    GT              shift and go to state 13
    LE              shift and go to state 14
    GE              shift and go to state 15
    EQ              shift and go to state 16
    NEQ             shift and go to state 17
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 29

    (24) bool_expression -> LPAREN . bool_expression RPAREN
    (23) arith_expression -> LPAREN . arith_expression RPAREN
    (7) bool_expression -> . arith_expression LT arith_expression
    (8) bool_expression -> . arith_expression GT arith_expression
    (9) bool_expression -> . arith_expression LE arith_expression
    (10) bool_expression -> . arith_expression GE arith_expression
    (11) bool_expression -> . arith_expression EQ arith_expression
    (12) bool_expression -> . arith_expression NEQ arith_expression
    (13) bool_expression -> . bool_expression BEQ bool_expression
    (14) bool_expression -> . bool_expression BNEQ bool_expression
    (15) bool_expression -> . bool_expression AND bool_expression
    (16) bool_expression -> . bool_expression OR bool_expression
    (17) bool_expression -> . bool_expression NAND bool_expression
    (18) bool_expression -> . bool_expression NOR bool_expression
    (19) bool_expression -> . bool_expression IMP bool_expression
    (20) bool_expression -> . NOT bool_expression
    (22) bool_expression -> . BOOL_LIT
    (24) bool_expression -> . LPAREN bool_expression RPAREN
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NOT             shift and go to state 6
    BOOL_LIT        shift and go to state 7
    LPAREN          shift and go to state 29
    NUMBER          shift and go to state 4

    bool_expression                shift and go to state 26
    arith_expression               shift and go to state 50

state 30

    (3) arith_expression -> arith_expression PLUS arith_expression .
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    PLUS            reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    MINUS           reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    LT              reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    GT              reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    LE              reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    GE              reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    EQ              reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    NEQ             reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    $end            reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    RPAREN          reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    BEQ             reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    BNEQ            reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    AND             reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    OR              reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    NAND            reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    NOR             reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    IMP             reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .)
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11

  ! TIMES           [ reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .) ]
  ! DIVIDE          [ reduce using rule 3 (arith_expression -> arith_expression PLUS arith_expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 31

    (23) arith_expression -> LPAREN . arith_expression RPAREN
    (3) arith_expression -> . arith_expression PLUS arith_expression
    (4) arith_expression -> . arith_expression MINUS arith_expression
    (5) arith_expression -> . arith_expression TIMES arith_expression
    (6) arith_expression -> . arith_expression DIVIDE arith_expression
    (21) arith_expression -> . NUMBER
    (23) arith_expression -> . LPAREN arith_expression RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 31

    arith_expression               shift and go to state 51

state 32

    (4) arith_expression -> arith_expression MINUS arith_expression .
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    PLUS            reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    MINUS           reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    LT              reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    GT              reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    LE              reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    GE              reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    EQ              reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    NEQ             reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    $end            reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    RPAREN          reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    BEQ             reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    BNEQ            reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    AND             reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    OR              reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    NAND            reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    NOR             reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    IMP             reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .)
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11

  ! TIMES           [ reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .) ]
  ! DIVIDE          [ reduce using rule 4 (arith_expression -> arith_expression MINUS arith_expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 33

    (5) arith_expression -> arith_expression TIMES arith_expression .
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    PLUS            reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    MINUS           reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    TIMES           reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    DIVIDE          reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    LT              reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    GT              reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    LE              reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    GE              reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    EQ              reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    NEQ             reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    $end            reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    RPAREN          reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    BEQ             reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    BNEQ            reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    AND             reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    OR              reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    NAND            reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    NOR             reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)
    IMP             reduce using rule 5 (arith_expression -> arith_expression TIMES arith_expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! TIMES           [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 34

    (6) arith_expression -> arith_expression DIVIDE arith_expression .
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    PLUS            reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    MINUS           reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    TIMES           reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    DIVIDE          reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    LT              reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    GT              reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    LE              reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    GE              reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    EQ              reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    NEQ             reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    $end            reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    RPAREN          reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    BEQ             reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    BNEQ            reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    AND             reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    OR              reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    NAND            reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    NOR             reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)
    IMP             reduce using rule 6 (arith_expression -> arith_expression DIVIDE arith_expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! TIMES           [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 35

    (7) bool_expression -> arith_expression LT arith_expression .
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    BEQ             reduce using rule 7 (bool_expression -> arith_expression LT arith_expression .)
    BNEQ            reduce using rule 7 (bool_expression -> arith_expression LT arith_expression .)
    AND             reduce using rule 7 (bool_expression -> arith_expression LT arith_expression .)
    OR              reduce using rule 7 (bool_expression -> arith_expression LT arith_expression .)
    NAND            reduce using rule 7 (bool_expression -> arith_expression LT arith_expression .)
    NOR             reduce using rule 7 (bool_expression -> arith_expression LT arith_expression .)
    IMP             reduce using rule 7 (bool_expression -> arith_expression LT arith_expression .)
    $end            reduce using rule 7 (bool_expression -> arith_expression LT arith_expression .)
    RPAREN          reduce using rule 7 (bool_expression -> arith_expression LT arith_expression .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 36

    (8) bool_expression -> arith_expression GT arith_expression .
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    BEQ             reduce using rule 8 (bool_expression -> arith_expression GT arith_expression .)
    BNEQ            reduce using rule 8 (bool_expression -> arith_expression GT arith_expression .)
    AND             reduce using rule 8 (bool_expression -> arith_expression GT arith_expression .)
    OR              reduce using rule 8 (bool_expression -> arith_expression GT arith_expression .)
    NAND            reduce using rule 8 (bool_expression -> arith_expression GT arith_expression .)
    NOR             reduce using rule 8 (bool_expression -> arith_expression GT arith_expression .)
    IMP             reduce using rule 8 (bool_expression -> arith_expression GT arith_expression .)
    $end            reduce using rule 8 (bool_expression -> arith_expression GT arith_expression .)
    RPAREN          reduce using rule 8 (bool_expression -> arith_expression GT arith_expression .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 37

    (9) bool_expression -> arith_expression LE arith_expression .
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    BEQ             reduce using rule 9 (bool_expression -> arith_expression LE arith_expression .)
    BNEQ            reduce using rule 9 (bool_expression -> arith_expression LE arith_expression .)
    AND             reduce using rule 9 (bool_expression -> arith_expression LE arith_expression .)
    OR              reduce using rule 9 (bool_expression -> arith_expression LE arith_expression .)
    NAND            reduce using rule 9 (bool_expression -> arith_expression LE arith_expression .)
    NOR             reduce using rule 9 (bool_expression -> arith_expression LE arith_expression .)
    IMP             reduce using rule 9 (bool_expression -> arith_expression LE arith_expression .)
    $end            reduce using rule 9 (bool_expression -> arith_expression LE arith_expression .)
    RPAREN          reduce using rule 9 (bool_expression -> arith_expression LE arith_expression .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 38

    (10) bool_expression -> arith_expression GE arith_expression .
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    BEQ             reduce using rule 10 (bool_expression -> arith_expression GE arith_expression .)
    BNEQ            reduce using rule 10 (bool_expression -> arith_expression GE arith_expression .)
    AND             reduce using rule 10 (bool_expression -> arith_expression GE arith_expression .)
    OR              reduce using rule 10 (bool_expression -> arith_expression GE arith_expression .)
    NAND            reduce using rule 10 (bool_expression -> arith_expression GE arith_expression .)
    NOR             reduce using rule 10 (bool_expression -> arith_expression GE arith_expression .)
    IMP             reduce using rule 10 (bool_expression -> arith_expression GE arith_expression .)
    $end            reduce using rule 10 (bool_expression -> arith_expression GE arith_expression .)
    RPAREN          reduce using rule 10 (bool_expression -> arith_expression GE arith_expression .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 39

    (11) bool_expression -> arith_expression EQ arith_expression .
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    BEQ             reduce using rule 11 (bool_expression -> arith_expression EQ arith_expression .)
    BNEQ            reduce using rule 11 (bool_expression -> arith_expression EQ arith_expression .)
    AND             reduce using rule 11 (bool_expression -> arith_expression EQ arith_expression .)
    OR              reduce using rule 11 (bool_expression -> arith_expression EQ arith_expression .)
    NAND            reduce using rule 11 (bool_expression -> arith_expression EQ arith_expression .)
    NOR             reduce using rule 11 (bool_expression -> arith_expression EQ arith_expression .)
    IMP             reduce using rule 11 (bool_expression -> arith_expression EQ arith_expression .)
    $end            reduce using rule 11 (bool_expression -> arith_expression EQ arith_expression .)
    RPAREN          reduce using rule 11 (bool_expression -> arith_expression EQ arith_expression .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 40

    (12) bool_expression -> arith_expression NEQ arith_expression .
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    BEQ             reduce using rule 12 (bool_expression -> arith_expression NEQ arith_expression .)
    BNEQ            reduce using rule 12 (bool_expression -> arith_expression NEQ arith_expression .)
    AND             reduce using rule 12 (bool_expression -> arith_expression NEQ arith_expression .)
    OR              reduce using rule 12 (bool_expression -> arith_expression NEQ arith_expression .)
    NAND            reduce using rule 12 (bool_expression -> arith_expression NEQ arith_expression .)
    NOR             reduce using rule 12 (bool_expression -> arith_expression NEQ arith_expression .)
    IMP             reduce using rule 12 (bool_expression -> arith_expression NEQ arith_expression .)
    $end            reduce using rule 12 (bool_expression -> arith_expression NEQ arith_expression .)
    RPAREN          reduce using rule 12 (bool_expression -> arith_expression NEQ arith_expression .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 41

    (13) bool_expression -> bool_expression BEQ bool_expression .
    (13) bool_expression -> bool_expression . BEQ bool_expression
    (14) bool_expression -> bool_expression . BNEQ bool_expression
    (15) bool_expression -> bool_expression . AND bool_expression
    (16) bool_expression -> bool_expression . OR bool_expression
    (17) bool_expression -> bool_expression . NAND bool_expression
    (18) bool_expression -> bool_expression . NOR bool_expression
    (19) bool_expression -> bool_expression . IMP bool_expression

    BEQ             reduce using rule 13 (bool_expression -> bool_expression BEQ bool_expression .)
    BNEQ            reduce using rule 13 (bool_expression -> bool_expression BEQ bool_expression .)
    AND             reduce using rule 13 (bool_expression -> bool_expression BEQ bool_expression .)
    OR              reduce using rule 13 (bool_expression -> bool_expression BEQ bool_expression .)
    NAND            reduce using rule 13 (bool_expression -> bool_expression BEQ bool_expression .)
    NOR             reduce using rule 13 (bool_expression -> bool_expression BEQ bool_expression .)
    IMP             reduce using rule 13 (bool_expression -> bool_expression BEQ bool_expression .)
    $end            reduce using rule 13 (bool_expression -> bool_expression BEQ bool_expression .)
    RPAREN          reduce using rule 13 (bool_expression -> bool_expression BEQ bool_expression .)

  ! BEQ             [ shift and go to state 18 ]
  ! BNEQ            [ shift and go to state 19 ]
  ! AND             [ shift and go to state 20 ]
  ! OR              [ shift and go to state 21 ]
  ! NAND            [ shift and go to state 22 ]
  ! NOR             [ shift and go to state 23 ]
  ! IMP             [ shift and go to state 24 ]


state 42

    (14) bool_expression -> bool_expression BNEQ bool_expression .
    (13) bool_expression -> bool_expression . BEQ bool_expression
    (14) bool_expression -> bool_expression . BNEQ bool_expression
    (15) bool_expression -> bool_expression . AND bool_expression
    (16) bool_expression -> bool_expression . OR bool_expression
    (17) bool_expression -> bool_expression . NAND bool_expression
    (18) bool_expression -> bool_expression . NOR bool_expression
    (19) bool_expression -> bool_expression . IMP bool_expression

    BEQ             reduce using rule 14 (bool_expression -> bool_expression BNEQ bool_expression .)
    BNEQ            reduce using rule 14 (bool_expression -> bool_expression BNEQ bool_expression .)
    AND             reduce using rule 14 (bool_expression -> bool_expression BNEQ bool_expression .)
    OR              reduce using rule 14 (bool_expression -> bool_expression BNEQ bool_expression .)
    NAND            reduce using rule 14 (bool_expression -> bool_expression BNEQ bool_expression .)
    NOR             reduce using rule 14 (bool_expression -> bool_expression BNEQ bool_expression .)
    IMP             reduce using rule 14 (bool_expression -> bool_expression BNEQ bool_expression .)
    $end            reduce using rule 14 (bool_expression -> bool_expression BNEQ bool_expression .)
    RPAREN          reduce using rule 14 (bool_expression -> bool_expression BNEQ bool_expression .)

  ! BEQ             [ shift and go to state 18 ]
  ! BNEQ            [ shift and go to state 19 ]
  ! AND             [ shift and go to state 20 ]
  ! OR              [ shift and go to state 21 ]
  ! NAND            [ shift and go to state 22 ]
  ! NOR             [ shift and go to state 23 ]
  ! IMP             [ shift and go to state 24 ]


state 43

    (15) bool_expression -> bool_expression AND bool_expression .
    (13) bool_expression -> bool_expression . BEQ bool_expression
    (14) bool_expression -> bool_expression . BNEQ bool_expression
    (15) bool_expression -> bool_expression . AND bool_expression
    (16) bool_expression -> bool_expression . OR bool_expression
    (17) bool_expression -> bool_expression . NAND bool_expression
    (18) bool_expression -> bool_expression . NOR bool_expression
    (19) bool_expression -> bool_expression . IMP bool_expression

    AND             reduce using rule 15 (bool_expression -> bool_expression AND bool_expression .)
    OR              reduce using rule 15 (bool_expression -> bool_expression AND bool_expression .)
    NAND            reduce using rule 15 (bool_expression -> bool_expression AND bool_expression .)
    NOR             reduce using rule 15 (bool_expression -> bool_expression AND bool_expression .)
    IMP             reduce using rule 15 (bool_expression -> bool_expression AND bool_expression .)
    $end            reduce using rule 15 (bool_expression -> bool_expression AND bool_expression .)
    RPAREN          reduce using rule 15 (bool_expression -> bool_expression AND bool_expression .)
    BEQ             shift and go to state 18
    BNEQ            shift and go to state 19

  ! BEQ             [ reduce using rule 15 (bool_expression -> bool_expression AND bool_expression .) ]
  ! BNEQ            [ reduce using rule 15 (bool_expression -> bool_expression AND bool_expression .) ]
  ! AND             [ shift and go to state 20 ]
  ! OR              [ shift and go to state 21 ]
  ! NAND            [ shift and go to state 22 ]
  ! NOR             [ shift and go to state 23 ]
  ! IMP             [ shift and go to state 24 ]


state 44

    (16) bool_expression -> bool_expression OR bool_expression .
    (13) bool_expression -> bool_expression . BEQ bool_expression
    (14) bool_expression -> bool_expression . BNEQ bool_expression
    (15) bool_expression -> bool_expression . AND bool_expression
    (16) bool_expression -> bool_expression . OR bool_expression
    (17) bool_expression -> bool_expression . NAND bool_expression
    (18) bool_expression -> bool_expression . NOR bool_expression
    (19) bool_expression -> bool_expression . IMP bool_expression

    OR              reduce using rule 16 (bool_expression -> bool_expression OR bool_expression .)
    NOR             reduce using rule 16 (bool_expression -> bool_expression OR bool_expression .)
    IMP             reduce using rule 16 (bool_expression -> bool_expression OR bool_expression .)
    $end            reduce using rule 16 (bool_expression -> bool_expression OR bool_expression .)
    RPAREN          reduce using rule 16 (bool_expression -> bool_expression OR bool_expression .)
    BEQ             shift and go to state 18
    BNEQ            shift and go to state 19
    AND             shift and go to state 20
    NAND            shift and go to state 22

  ! BEQ             [ reduce using rule 16 (bool_expression -> bool_expression OR bool_expression .) ]
  ! BNEQ            [ reduce using rule 16 (bool_expression -> bool_expression OR bool_expression .) ]
  ! AND             [ reduce using rule 16 (bool_expression -> bool_expression OR bool_expression .) ]
  ! NAND            [ reduce using rule 16 (bool_expression -> bool_expression OR bool_expression .) ]
  ! OR              [ shift and go to state 21 ]
  ! NOR             [ shift and go to state 23 ]
  ! IMP             [ shift and go to state 24 ]


state 45

    (17) bool_expression -> bool_expression NAND bool_expression .
    (13) bool_expression -> bool_expression . BEQ bool_expression
    (14) bool_expression -> bool_expression . BNEQ bool_expression
    (15) bool_expression -> bool_expression . AND bool_expression
    (16) bool_expression -> bool_expression . OR bool_expression
    (17) bool_expression -> bool_expression . NAND bool_expression
    (18) bool_expression -> bool_expression . NOR bool_expression
    (19) bool_expression -> bool_expression . IMP bool_expression

    AND             reduce using rule 17 (bool_expression -> bool_expression NAND bool_expression .)
    OR              reduce using rule 17 (bool_expression -> bool_expression NAND bool_expression .)
    NAND            reduce using rule 17 (bool_expression -> bool_expression NAND bool_expression .)
    NOR             reduce using rule 17 (bool_expression -> bool_expression NAND bool_expression .)
    IMP             reduce using rule 17 (bool_expression -> bool_expression NAND bool_expression .)
    $end            reduce using rule 17 (bool_expression -> bool_expression NAND bool_expression .)
    RPAREN          reduce using rule 17 (bool_expression -> bool_expression NAND bool_expression .)
    BEQ             shift and go to state 18
    BNEQ            shift and go to state 19

  ! BEQ             [ reduce using rule 17 (bool_expression -> bool_expression NAND bool_expression .) ]
  ! BNEQ            [ reduce using rule 17 (bool_expression -> bool_expression NAND bool_expression .) ]
  ! AND             [ shift and go to state 20 ]
  ! OR              [ shift and go to state 21 ]
  ! NAND            [ shift and go to state 22 ]
  ! NOR             [ shift and go to state 23 ]
  ! IMP             [ shift and go to state 24 ]


state 46

    (18) bool_expression -> bool_expression NOR bool_expression .
    (13) bool_expression -> bool_expression . BEQ bool_expression
    (14) bool_expression -> bool_expression . BNEQ bool_expression
    (15) bool_expression -> bool_expression . AND bool_expression
    (16) bool_expression -> bool_expression . OR bool_expression
    (17) bool_expression -> bool_expression . NAND bool_expression
    (18) bool_expression -> bool_expression . NOR bool_expression
    (19) bool_expression -> bool_expression . IMP bool_expression

    OR              reduce using rule 18 (bool_expression -> bool_expression NOR bool_expression .)
    NOR             reduce using rule 18 (bool_expression -> bool_expression NOR bool_expression .)
    IMP             reduce using rule 18 (bool_expression -> bool_expression NOR bool_expression .)
    $end            reduce using rule 18 (bool_expression -> bool_expression NOR bool_expression .)
    RPAREN          reduce using rule 18 (bool_expression -> bool_expression NOR bool_expression .)
    BEQ             shift and go to state 18
    BNEQ            shift and go to state 19
    AND             shift and go to state 20
    NAND            shift and go to state 22

  ! BEQ             [ reduce using rule 18 (bool_expression -> bool_expression NOR bool_expression .) ]
  ! BNEQ            [ reduce using rule 18 (bool_expression -> bool_expression NOR bool_expression .) ]
  ! AND             [ reduce using rule 18 (bool_expression -> bool_expression NOR bool_expression .) ]
  ! NAND            [ reduce using rule 18 (bool_expression -> bool_expression NOR bool_expression .) ]
  ! OR              [ shift and go to state 21 ]
  ! NOR             [ shift and go to state 23 ]
  ! IMP             [ shift and go to state 24 ]


state 47

    (19) bool_expression -> bool_expression IMP bool_expression .
    (13) bool_expression -> bool_expression . BEQ bool_expression
    (14) bool_expression -> bool_expression . BNEQ bool_expression
    (15) bool_expression -> bool_expression . AND bool_expression
    (16) bool_expression -> bool_expression . OR bool_expression
    (17) bool_expression -> bool_expression . NAND bool_expression
    (18) bool_expression -> bool_expression . NOR bool_expression
    (19) bool_expression -> bool_expression . IMP bool_expression

  ! shift/reduce conflict for BEQ resolved as shift
  ! shift/reduce conflict for BNEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for IMP resolved as shift
    $end            reduce using rule 19 (bool_expression -> bool_expression IMP bool_expression .)
    RPAREN          reduce using rule 19 (bool_expression -> bool_expression IMP bool_expression .)
    BEQ             shift and go to state 18
    BNEQ            shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21
    NAND            shift and go to state 22
    NOR             shift and go to state 23
    IMP             shift and go to state 24

  ! BEQ             [ reduce using rule 19 (bool_expression -> bool_expression IMP bool_expression .) ]
  ! BNEQ            [ reduce using rule 19 (bool_expression -> bool_expression IMP bool_expression .) ]
  ! AND             [ reduce using rule 19 (bool_expression -> bool_expression IMP bool_expression .) ]
  ! OR              [ reduce using rule 19 (bool_expression -> bool_expression IMP bool_expression .) ]
  ! NAND            [ reduce using rule 19 (bool_expression -> bool_expression IMP bool_expression .) ]
  ! NOR             [ reduce using rule 19 (bool_expression -> bool_expression IMP bool_expression .) ]
  ! IMP             [ reduce using rule 19 (bool_expression -> bool_expression IMP bool_expression .) ]


state 48

    (23) arith_expression -> LPAREN arith_expression RPAREN .

    PLUS            reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    MINUS           reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    TIMES           reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    DIVIDE          reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    LT              reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    GT              reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    LE              reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    GE              reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    EQ              reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    NEQ             reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    $end            reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    RPAREN          reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    BEQ             reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    BNEQ            reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    AND             reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    OR              reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    NAND            reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    NOR             reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)
    IMP             reduce using rule 23 (arith_expression -> LPAREN arith_expression RPAREN .)


state 49

    (24) bool_expression -> LPAREN bool_expression RPAREN .

    BEQ             reduce using rule 24 (bool_expression -> LPAREN bool_expression RPAREN .)
    BNEQ            reduce using rule 24 (bool_expression -> LPAREN bool_expression RPAREN .)
    AND             reduce using rule 24 (bool_expression -> LPAREN bool_expression RPAREN .)
    OR              reduce using rule 24 (bool_expression -> LPAREN bool_expression RPAREN .)
    NAND            reduce using rule 24 (bool_expression -> LPAREN bool_expression RPAREN .)
    NOR             reduce using rule 24 (bool_expression -> LPAREN bool_expression RPAREN .)
    IMP             reduce using rule 24 (bool_expression -> LPAREN bool_expression RPAREN .)
    $end            reduce using rule 24 (bool_expression -> LPAREN bool_expression RPAREN .)
    RPAREN          reduce using rule 24 (bool_expression -> LPAREN bool_expression RPAREN .)


state 50

    (23) arith_expression -> LPAREN arith_expression . RPAREN
    (7) bool_expression -> arith_expression . LT arith_expression
    (8) bool_expression -> arith_expression . GT arith_expression
    (9) bool_expression -> arith_expression . LE arith_expression
    (10) bool_expression -> arith_expression . GE arith_expression
    (11) bool_expression -> arith_expression . EQ arith_expression
    (12) bool_expression -> arith_expression . NEQ arith_expression
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    RPAREN          shift and go to state 48
    LT              shift and go to state 12
    GT              shift and go to state 13
    LE              shift and go to state 14
    GE              shift and go to state 15
    EQ              shift and go to state 16
    NEQ             shift and go to state 17
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 51

    (23) arith_expression -> LPAREN arith_expression . RPAREN
    (3) arith_expression -> arith_expression . PLUS arith_expression
    (4) arith_expression -> arith_expression . MINUS arith_expression
    (5) arith_expression -> arith_expression . TIMES arith_expression
    (6) arith_expression -> arith_expression . DIVIDE arith_expression

    RPAREN          shift and go to state 48
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BEQ in state 27 resolved as shift
WARNING: shift/reduce conflict for BNEQ in state 27 resolved as shift
WARNING: shift/reduce conflict for AND in state 27 resolved as shift
WARNING: shift/reduce conflict for OR in state 27 resolved as shift
WARNING: shift/reduce conflict for NAND in state 27 resolved as shift
WARNING: shift/reduce conflict for NOR in state 27 resolved as shift
WARNING: shift/reduce conflict for IMP in state 27 resolved as shift
WARNING: shift/reduce conflict for BEQ in state 47 resolved as shift
WARNING: shift/reduce conflict for BNEQ in state 47 resolved as shift
WARNING: shift/reduce conflict for AND in state 47 resolved as shift
WARNING: shift/reduce conflict for OR in state 47 resolved as shift
WARNING: shift/reduce conflict for NAND in state 47 resolved as shift
WARNING: shift/reduce conflict for NOR in state 47 resolved as shift
WARNING: shift/reduce conflict for IMP in state 47 resolved as shift
