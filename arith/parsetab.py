
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionleftORNORXORleftANDNANDleftEQNEQleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEAND BOOL_LIT DIVIDE EQ GE GT IMP LE LPAREN LT MINUS NAND NEQ NOR NOT NUMBER OR PLUS RPAREN TIMES XOR\n    expression : arith_expression\n               | bool_expression\n    arith_expression : arith_expression PLUS arith_expressionarith_expression : arith_expression MINUS arith_expressionarith_expression : arith_expression TIMES arith_expressionarith_expression : arith_expression DIVIDE arith_expressionarith_expression : NUMBERbool_expression : BOOL_LIT\n    arith_expression : LPAREN arith_expression RPAREN\n    bool_expression : LPAREN bool_expression RPAREN\n    \n    arith_expression : arith_expression EQ arith_expression\n    bool_expression : bool_expression EQ bool_expression\n    \n    arith_expression : arith_expression NEQ arith_expression\n    bool_expression : bool_expression NEQ bool_expression\n                    | bool_expression XOR bool_expression\n    bool_expression : arith_expression LT arith_expressionbool_expression : arith_expression GT arith_expressionbool_expression : arith_expression LE arith_expressionbool_expression : arith_expression GE arith_expressionbool_expression : NOT bool_expressionbool_expression : bool_expression AND bool_expressionbool_expression : bool_expression OR bool_expressionbool_expression : bool_expression NAND bool_expressionbool_expression : bool_expression NOR bool_expressionbool_expression : bool_expression IMP bool_expression'
    
_lr_action_items = {'NUMBER':([0,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,29,32,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'LPAREN':([0,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,29,32,],[5,5,29,32,32,32,32,32,32,32,32,32,32,29,29,29,29,29,29,29,29,29,32,]),'BOOL_LIT':([0,5,7,18,19,20,21,22,23,24,25,29,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'NOT':([0,5,7,18,19,20,21,22,23,24,25,29,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'$end':([1,2,3,4,6,28,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[0,-1,-2,-7,-8,-20,-3,-4,-5,-6,-11,-13,-16,-17,-18,-19,-12,-14,-15,-21,-22,-23,-24,-25,-9,-10,]),'PLUS':([2,4,26,30,31,33,34,35,36,37,38,39,40,41,50,52,53,],[8,-7,8,8,-3,-4,-5,-6,8,8,8,8,8,8,-9,8,8,]),'MINUS':([2,4,26,30,31,33,34,35,36,37,38,39,40,41,50,52,53,],[9,-7,9,9,-3,-4,-5,-6,9,9,9,9,9,9,-9,9,9,]),'TIMES':([2,4,26,30,31,33,34,35,36,37,38,39,40,41,50,52,53,],[10,-7,10,10,10,10,-5,-6,10,10,10,10,10,10,-9,10,10,]),'DIVIDE':([2,4,26,30,31,33,34,35,36,37,38,39,40,41,50,52,53,],[11,-7,11,11,11,11,-5,-6,11,11,11,11,11,11,-9,11,11,]),'EQ':([2,3,4,6,26,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[12,18,-7,-8,12,18,18,12,-3,-4,-5,-6,-11,-13,-16,-17,-18,-19,-12,-14,18,18,18,18,18,18,-9,-10,12,12,]),'NEQ':([2,3,4,6,26,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[13,19,-7,-8,13,19,19,13,-3,-4,-5,-6,-11,-13,-16,-17,-18,-19,-12,-14,19,19,19,19,19,19,-9,-10,13,13,]),'LT':([2,4,26,30,31,33,34,35,36,37,50,52,],[14,-7,14,14,-3,-4,-5,-6,-11,-13,-9,14,]),'GT':([2,4,26,30,31,33,34,35,36,37,50,52,],[15,-7,15,15,-3,-4,-5,-6,-11,-13,-9,15,]),'LE':([2,4,26,30,31,33,34,35,36,37,50,52,],[16,-7,16,16,-3,-4,-5,-6,-11,-13,-9,16,]),'GE':([2,4,26,30,31,33,34,35,36,37,50,52,],[17,-7,17,17,-3,-4,-5,-6,-11,-13,-9,17,]),'XOR':([3,4,6,27,28,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[20,-7,-8,20,20,-3,-4,-5,-6,-11,-13,-16,-17,-18,-19,-12,-14,-15,-21,-22,-23,-24,20,-9,-10,]),'AND':([3,4,6,27,28,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[21,-7,-8,21,21,-3,-4,-5,-6,-11,-13,-16,-17,-18,-19,-12,-14,21,-21,21,-23,21,21,-9,-10,]),'OR':([3,4,6,27,28,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[22,-7,-8,22,22,-3,-4,-5,-6,-11,-13,-16,-17,-18,-19,-12,-14,-15,-21,-22,-23,-24,22,-9,-10,]),'NAND':([3,4,6,27,28,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[23,-7,-8,23,23,-3,-4,-5,-6,-11,-13,-16,-17,-18,-19,-12,-14,23,-21,23,-23,23,23,-9,-10,]),'NOR':([3,4,6,27,28,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[24,-7,-8,24,24,-3,-4,-5,-6,-11,-13,-16,-17,-18,-19,-12,-14,-15,-21,-22,-23,-24,24,-9,-10,]),'IMP':([3,4,6,27,28,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[25,-7,-8,25,25,-3,-4,-5,-6,-11,-13,-16,-17,-18,-19,-12,-14,-15,-21,-22,-23,-24,25,-9,-10,]),'RPAREN':([4,6,26,27,28,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[-7,-8,50,51,-20,-3,-4,-5,-6,-11,-13,-16,-17,-18,-19,-12,-14,-15,-21,-22,-23,-24,-25,-9,-10,50,50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,],[1,]),'arith_expression':([0,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,29,32,],[2,26,30,31,33,34,35,36,37,38,39,40,41,30,30,30,30,30,30,30,30,52,53,]),'bool_expression':([0,5,7,18,19,20,21,22,23,24,25,29,],[3,27,28,42,43,44,45,46,47,48,49,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> arith_expression','expression',1,'p_expression','airth_parser.py',16),
  ('expression -> bool_expression','expression',1,'p_expression','airth_parser.py',17),
  ('arith_expression -> arith_expression PLUS arith_expression','arith_expression',3,'p_expression_plus','airth_parser.py',22),
  ('arith_expression -> arith_expression MINUS arith_expression','arith_expression',3,'p_expression_minus','airth_parser.py',26),
  ('arith_expression -> arith_expression TIMES arith_expression','arith_expression',3,'p_expression_times','airth_parser.py',30),
  ('arith_expression -> arith_expression DIVIDE arith_expression','arith_expression',3,'p_expression_divide','airth_parser.py',34),
  ('arith_expression -> NUMBER','arith_expression',1,'p_expression_num','airth_parser.py',38),
  ('bool_expression -> BOOL_LIT','bool_expression',1,'p_expression_bool_lit','airth_parser.py',42),
  ('arith_expression -> LPAREN arith_expression RPAREN','arith_expression',3,'p_expression_paren','airth_parser.py',47),
  ('bool_expression -> LPAREN bool_expression RPAREN','bool_expression',3,'p_expression_paren','airth_parser.py',48),
  ('arith_expression -> arith_expression EQ arith_expression','arith_expression',3,'p_expression_eq','airth_parser.py',54),
  ('bool_expression -> bool_expression EQ bool_expression','bool_expression',3,'p_expression_eq','airth_parser.py',55),
  ('arith_expression -> arith_expression NEQ arith_expression','arith_expression',3,'p_expression_neq','airth_parser.py',61),
  ('bool_expression -> bool_expression NEQ bool_expression','bool_expression',3,'p_expression_neq','airth_parser.py',62),
  ('bool_expression -> bool_expression XOR bool_expression','bool_expression',3,'p_expression_neq','airth_parser.py',63),
  ('bool_expression -> arith_expression LT arith_expression','bool_expression',3,'p_expression_lt','airth_parser.py',68),
  ('bool_expression -> arith_expression GT arith_expression','bool_expression',3,'p_expression_gt','airth_parser.py',72),
  ('bool_expression -> arith_expression LE arith_expression','bool_expression',3,'p_expression_le','airth_parser.py',76),
  ('bool_expression -> arith_expression GE arith_expression','bool_expression',3,'p_expression_ge','airth_parser.py',80),
  ('bool_expression -> NOT bool_expression','bool_expression',2,'p_expression_not','airth_parser.py',84),
  ('bool_expression -> bool_expression AND bool_expression','bool_expression',3,'p_expression_and','airth_parser.py',88),
  ('bool_expression -> bool_expression OR bool_expression','bool_expression',3,'p_expression_or','airth_parser.py',92),
  ('bool_expression -> bool_expression NAND bool_expression','bool_expression',3,'p_expression_nand','airth_parser.py',96),
  ('bool_expression -> bool_expression NOR bool_expression','bool_expression',3,'p_expression_nor','airth_parser.py',100),
  ('bool_expression -> bool_expression IMP bool_expression','bool_expression',3,'p_expression_imp','airth_parser.py',104),
]
